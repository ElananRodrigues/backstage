name: Deploy to Amazon ECS

env:
  AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

on:
  push:
    branches:
      - 'master'
      - 'main'
      - 'develop'
    paths-ignore:
      - 'docs/**'
      - 'ecs/catalog-info.yaml'

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.ref_name }}
      url: "${{ steps.get-url-load-balancer.outputs.LOAD_BALANCER_URL }}"
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: If Dockerfile exists run the next steps
        id: check-dockerfile
        run: |
          if [ -f Dockerfile ]; then
            echo "Dockerfile exists"
          else
            echo "Dockerfile does not exist"
            exit 1
          fi
  
      - name: Create docker image name
        id: docker-image
        run: |
          BRANCH_NAME=${{ github.ref_name }}
          IMAGE_NAME=${BRANCH_NAME}_V${{ github.run_number }}_${{ github.sha }}
          if [[ $BRANCH_NAME == main || $BRANCH_NAME == master ]]; then
            IMAGE_NAME=latest_V${{ github.run_number }}_${{ github.sha }}
          fi
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Extract repository name
        id: extract-repository-name
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d '/' -f 2)
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push to ECR
        env:
          REGISTRY: ${{ steps.login.outputs.registry }}
          REPOSITORY: ${{ steps.extract-repository-name.outputs.REPO_NAME }}
          COMMIT: ${{ steps.docker-image.outputs.IMAGE_NAME }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:${COMMIT} .
          docker push $REGISTRY/$REPOSITORY:${COMMIT}
      
      - name: Get cluster name and environment
        id: extract-cluster-name
        run: |
          CLUSTER=$(cat ./ecs/SERVICE.json | jq -r '.cluster_name');
          ENVIRONMENT=$(cat ./ecs/SERVICE.json | jq -r '.environment');

          if [[ $BRANCH_NAME == main || $BRANCH_NAME == master ]]; then
            CLUSTER_NAME=$CLUSTER-production;
          else
            CLUSTER_NAME=$CLUSTER-$ENVIRONMENT;
          fi

          SERVICE=${{ steps.extract-repository-name.outputs.REPO_NAME }}

          ACTIVE=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE --query 'services[0].status' --output text);

          if [ "$ACTIVE" == "ACTIVE" ]; then
            echo "Service is active";
          else
            echo "Service is not active";
            exit 1;
          fi

          echo "::set-output name=cluster_name::$CLUSTER_NAME"

      - name: Modify Amazon ECS task definition with second container
        id: render-app-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./ecs/task-definition.json
          container-name: '${{ steps.extract-repository-name.outputs.REPO_NAME }}'
          image: '${{ steps.login.outputs.registry }}/${{ steps.extract-repository-name.outputs.REPO_NAME }}:${{ steps.docker-image.outputs.IMAGE_NAME }}'
      
      - name: Deploy to ECS using the updated task definition
        id: task-def-deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-app-container.outputs.task-definition }}
          cluster: ${{ steps.extract-cluster-name.outputs.cluster_name }}
          service: '${{ steps.extract-repository-name.outputs.REPO_NAME }}'
          wait-for-service-stability: true
          desired-count: 1
          force-new-deployment: true
      
      - name: Get URL
        id: get-url-load-balancer
        run: |
          SERVICE=$(cat ./ecs/SERVICE.json | jq -r '.url');
          echo "LOAD_BALANCER_URL=${SERVICE}" >> $GITHUB_OUTPUT
